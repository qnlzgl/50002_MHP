/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip,
    output reg signal_A,
    output reg signal_B,
    output reg signal_Ci,
    input signal_S,
    input signal_Co
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_edge_detector_out;
  reg [1-1:0] M_edge_detector_in;
  edge_detector_2 edge_detector (
    .clk(clk),
    .in(M_edge_detector_in),
    .out(M_edge_detector_out)
  );
  wire [1-1:0] M_button_cond_out;
  reg [1-1:0] M_button_cond_in;
  button_conditioner_3 button_cond (
    .clk(clk),
    .in(M_button_cond_in),
    .out(M_button_cond_out)
  );
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_4 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  reg [2:0] M_counter_d, M_counter_q = 1'h0;
  localparam IDLE_state = 2'd0;
  localparam TEST_state = 2'd1;
  localparam PASS_state = 2'd2;
  localparam FAIL_state = 2'd3;
  
  reg [1:0] M_state_d, M_state_q = IDLE_state;
  localparam COUNT_counter_fsm = 1'd0;
  localparam RESET_counter_fsm = 1'd1;
  
  reg M_counter_fsm_d, M_counter_fsm_q = RESET_counter_fsm;
  
  reg [2:0] adder_out;
  
  always @* begin
    M_state_d = M_state_q;
    M_counter_d = M_counter_q;
    
    M_button_cond_in = io_button[1+0-:1];
    M_edge_detector_in = M_button_cond_out;
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = {3'h0, io_button};
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
    io_led = 24'h000000;
    signal_A = 1'h0;
    signal_B = 1'h0;
    signal_Ci = 1'h0;
    M_seg_values = 16'h0000;
    
    case (M_state_q)
      IDLE_state: begin
        M_seg_values = 16'h5861;
        io_led = 24'h000000;
        if (M_edge_detector_out) begin
          M_state_d = TEST_state;
        end
      end
      TEST_state: begin
        M_seg_values = 16'h0120;
        signal_A = M_counter_q[2+0-:1];
        signal_B = M_counter_q[1+0-:1];
        signal_Ci = M_counter_q[0+0-:1];
        io_led[16+5+2-:3] = M_counter_q;
        io_led[8+6+0-:1] = signal_S;
        io_led[8+7+0-:1] = signal_Co;
        io_led[8+5+2-:3] = M_counter_q[0+0-:1] + M_counter_q[1+0-:1] + M_counter_q[2+0-:1];
        io_led[8+2+2-:3] = signal_Co + signal_Co + signal_S;
        io_led[0+(M_counter_q)*1+0-:1] = (M_counter_q[0+0-:1] + M_counter_q[1+0-:1] + M_counter_q[2+0-:1] == signal_Co + signal_Co + signal_S);
        if (rst == 1'h1) begin
          M_state_d = IDLE_state;
        end
        if (M_edge_detector_out) begin
          if (!(M_counter_q[0+0-:1] + M_counter_q[1+0-:1] + M_counter_q[2+0-:1] == signal_Co + signal_Co + signal_S)) begin
            M_state_d = FAIL_state;
          end
          if (M_counter_q == 3'h7) begin
            M_state_d = PASS_state;
          end
          M_counter_d = M_counter_q + 1'h1;
        end
      end
      PASS_state: begin
        M_seg_values = 16'h7422;
        M_counter_d = 3'h0;
        if (rst == 1'h1) begin
          M_state_d = IDLE_state;
        end
      end
      FAIL_state: begin
        M_seg_values = 16'h3456;
        M_counter_d = 3'h0;
        if (rst == 1'h1) begin
          M_state_d = IDLE_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
      M_state_q <= 1'h0;
      M_counter_fsm_q <= 1'h1;
    end else begin
      M_counter_q <= M_counter_d;
      M_state_q <= M_state_d;
      M_counter_fsm_q <= M_counter_fsm_d;
    end
  end
  
endmodule
